#!/usr/bin/expect


# Get the directory of the current script
set SCRIPT_DIR [file normalize [file dirname $argv0]]


# Use the directory for further actions
puts $SCRIPT_DIR

set image_name [lrange $argv 0 0]

puts $image_name


set timeout -1


spawn awk -f $SCRIPT_DIR/log/Macs.awk "$SCRIPT_DIR/log/Macs.csv"
    expect -re "(.*)\r\n"
    set mac_address $expect_out(1,string)

set increment [exec cat "$SCRIPT_DIR/Repo_path" | sed -n '5p']

puts $increment



spawn ocs-live-feed-img -cbm netboot -dm auto-detect -lscm massive-deployment -mdst from-image -g auto -e1 auto -e2 -r -x -j2 -k0 -sc0 -p shutdown -md multicast --clients-to-wait 40 --max-time-to-wait 120 start $image_name-img sda

expect {
    {//NOTE// If you choose "yes", you have to make sure your DHCP server provides enough number of IP address for all the clients. Besides, this mechanism is risky because all the PXE or uEFI network booting clients will enter DRBL or Clonezilla mode. Please make sure this is what you want.} {
        send "Y\r"
        exp_continue
    }
    {Do all clients finish restoring jobs? //NOTE// DO NOT ANSWER "y" IF ALL CLIENTS HAVE _NOT_ FINISHED JOBS. It might terminate the required services for restoring.}
   {foreach element $mac_address {
        spawn wakeonlan $element
        after 1000}
    spawn shutdown -r "+$increment";
    exp_continue}
	}

expect eof
