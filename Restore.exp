#!/usr/bin/expect

#Este es el archivo que correr치 clonezilla en su shell, contiene todos los parametros y automatizaciones requeridas para que el proceso sea desatendido.

#Indica la ruta del archivo para ubicar de forma relativa el resto
set SCRIPT_DIR [file normalize [file dirname $argv0]]
puts $SCRIPT_DIR

#Toma el nombre de la imagen del primer parametro
set image_name [lrange $argv 0 0]
puts $image_name


#Toma el tiempo de espera hasta reiniciar clonezilla del segundo parametro
set increment [lrange $argv 1 1]
puts $increment


#Toma el disco destino
set disk [lrange $argv 2 2]
puts $disk

set timeout -1

#Toma las Macs del archivo /pumi/log/Macs.csv que genero Restore.sh
spawn awk -f $SCRIPT_DIR/log/disks_macs.awk filter=$disk  $SCRIPT_DIR/log/Macs.csv
expect {
    -re "(.*)\r\n" {
        set mac_address $expect_out(1,string)
    }
    eof {
        set mac_address ""
    }
}

set M [llength [split $mac_address "\n"]]
puts $M

if {$M != 0} {
    set num $M
} else {
    set num 100
}

puts $num

#Le pasa a clonezilla el codigo que ejectur치

set dhcp [lrange $argv 3 3]
puts $dhcp

#estoy probando -k0 para clonar la tabla de partici칩n como viene desde la imagen directamente, esto puede ser importante al trabajar con discos de distintos tama침os
if {$dhcp} {
    spawn ocs-live-feed-img -cbm netboot -dm auto-detect -lscm massive-deployment -mdst from-image -e1 auto -e2 -t -r -x -k0 -sc0 -p shutdown -md multicast --clients-to-wait $num --max-time-to-wait 120 start $image_name-img $disk

    expect {
        {//NOTE// If you choose "yes", you have to make sure your DHCP server provides enough number of IP address for all the clients. Besides, this mechanism is risky because all the PXE or uEFI network booting clients will enter DRBL or Clonezilla mode. Please make sure this is what you want.} {
            send "Y\r"
            exp_continue
        }
        {Do all clients finish restoring jobs? //NOTE// DO NOT ANSWER "y" IF ALL CLIENTS HAVE _NOT_ FINISHED JOBS. It might terminate the required services for restoring.} {
            foreach element $mac_address {
                spawn wakeonlan $element
                after 500
            }
            spawn shutdown -r "+$increment"
            exp_continue
        }
    }

    expect eof
} else {
    spawn ocs-live-feed-img -cbm netboot -dm start-new-dhcpd -lscm massive-deployment -mdst from-image -e1 auto -e2 -t -r -x -k -sc0 -p shutdown -md multicast --clients-to-wait $num --max-time-to-wait 120 start $image_name-img $disk

    expect {
        {Do all clients finish restoring jobs? //NOTE// DO NOT ANSWER "y" IF ALL CLIENTS HAVE _NOT_ FINISHED JOBS. It might terminate the required services for restoring.} {
            foreach element $mac_address {
                spawn wakeonlan $element
                after 1000
            }
            spawn shutdown -r "+$increment"
            exp_continue
        }
    }

    expect eof
}



