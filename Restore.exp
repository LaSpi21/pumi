#!/usr/bin/expect

#Este es el archivo que correrá clonezilla en su shell, contiene todos los parametros y automatizaciones requeridas para que el proceso sea desatendido.

#Indica la ruta del archivo para ubicar de forma relativa el resto
set SCRIPT_DIR [file normalize [file dirname $argv0]]
puts $SCRIPT_DIR

#Toma el nombre de la imagen del primer parametro
set image_name [lrange $argv 0 0]
puts $image_name


#Toma el tiempo de espera hasta reiniciar clonezilla del segundo parametro
set increment [lrange $argv 1 1]
puts $increment

#Toma la cantidad de maquinas en el .log del tercer parametro
set num [lrange $argv 2 2]
puts $num

set timeout -1

#Toma las Macs del archivo /pumi/log/Macs.csv que genero Restore.sh
spawn awk -f $SCRIPT_DIR/log/Macs.awk "$SCRIPT_DIR/log/Macs.csv"
    expect -re "(.*)\r\n"
    set mac_address $expect_out(1,string)


#Le pasa a clonezilla el codigo que ejecturá
spawn ocs-live-feed-img -cbm netboot -dm start-new-dhcpd -lscm massive-deployment -mdst from-image -g auto -e1 auto -e2 -r -x -j2 -k0 -sc0 -p shutdown -md multicast --clients-to-wait $num --max-time-to-wait 120 start $image_name-img sda

#Automatiza las interacciones con el usuario, despierta cada maquina en Macs.csv y luego reinicia el servidor.
expect {
    {Do all clients finish restoring jobs? //NOTE// DO NOT ANSWER "y" IF ALL CLIENTS HAVE _NOT_ FINISHED JOBS. It might terminate the required services for restoring.}
   {foreach element $mac_address {
        spawn wakeonlan $element
        after 1000}
    spawn shutdown -r "+$increment";
    exp_continue}
        }

expect eof







